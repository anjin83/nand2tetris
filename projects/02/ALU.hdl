// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //Set up nx and ny
    Not16(in=x, out=notX); 
    Not16(in=y, out=notY);
    //Handle zx, nx, zy, ny bits
    Mux4Way16(a=x, b=false, c=notX, d=true, sel[0]=zx, sel[1]=nx, out=outX);
    Mux4Way16(a=y, b=false, c=notY, d=true, sel[0]=zy, sel[1]=ny, out=outY);
    //Calculate all possible outputs for ALU
    Add16(a=outX, b=outY, out=xAddY);
    And16(a=outX, b=outY, out=xAndY);
    Not16(in=xAddY, out=notXAddY);
    Not16(in=xAndY, out=notXAndY);    
    //Handle f and no bits
    Mux4Way16(a=xAndY, b=notXAndY, c=xAddY, d=notXAddY, sel[0]=no, sel[1]=f, out[0..7]=outputLow, out[8..14]=outputHigh, out[15]=msb); //Necessary to split output bits as hdl does not allow sub-addressing of temp buses.
    //Handle zr and ng output bits
    Or8Way(in=outputLow, out=lowOr); //Check for 0
    Or8Way(in[0..6]=outputHigh, in[7]=msb, out=highOr); //Check for 0
    Or(a=lowOr, b=highOr, out=lowOrHigh);
    Not(in=lowOrHigh, out=zr);
    And(a=msb, b=true, out=ng); //Check for negative

    //Output. Necessary to And as hdl does not allow 2 outputs from single gate.
    And16(a[0..7]=outputLow, a[8..14]=outputHigh, a[15]=msb, b=true, out=out);
}